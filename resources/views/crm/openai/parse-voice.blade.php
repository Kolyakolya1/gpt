@extends('crm.layout')
@section('headerStyles')
    <style>
        #errorMessages {
            display: block !important;
            visibility: visible !important;
            color: red;
            font-size: 1.5rem;
        }
        .container {
            max-width: 100vw;
            overflow-x: hidden;
            padding-left: 20px; /* –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ */
        }
    </style>
@endsection

@section('content')
    <input type="hidden" name="_token" value="{{ csrf_token() }}">

    <div class="container mt-4 d-flex flex-column" style="height: 100vh;">
        <div class="d-flex flex-row flex-wrap gap-3 align-items-center">
            <div class="flex-fill">
                <div class="input-group">
                    <span class="input-group-text" style="font-size: 2rem;" data-bs-toggle="tooltip" title="Select the language you will speak">üôä</span>
                    <select id="spokenLanguageSelect" class="form-select" data-bs-toggle="tooltip" title="Choose your spoken language">
                        <option value="ru-RU">–†—É—Å—Å–∫–∏–π</option>
                        <option value="uk-UA">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                        <option value="en-US">English</option>
                        <option value="de-DE">Deutsch</option>
                        <option value="sk-SK">Slovenƒçina</option>
                        <option value="ro-RO">Romanian</option>
                    </select>
                </div>
            </div>

            <div class="flex-fill">
                <div class="input-group">
                    <span class="input-group-text" style="font-size: 2rem;" data-bs-toggle="tooltip" title="Select the language for response">üôâ</span>
                    <select id="languageSelect" class="form-select" data-bs-toggle="tooltip" title="Choose the language for playback">
                        <option value="ru-RU">–†—É—Å—Å–∫–∏–π</option>
                        <option value="uk-UA">–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                        <option value="en-US">English</option>
                        <option value="de-DE">Deutsch</option>
                        <option value="sk-SK">Slovenƒçina</option>
                        <option value="ro-RO">Romanian</option>
                    </select>
                </div>
            </div>

            <div class="d-flex gap-2">
                <button id="text_with_chatgpt" class="btn btn-success btn-lg recordButton" data-action="text_with_chatgpt"
                        data-bs-toggle="tooltip" title="Send text to ChatGPT">
                    <span class="d-flex justify-content-center align-items-center w-100 h-100" style="font-size: 2rem;">‚úç</span>
                </button>
                <button id="speak_with_chatgpt" class="btn btn-warning btn-lg recordButton" data-action="speak_with_chatgpt"
                        data-bs-toggle="tooltip" title="Speak with ChatGPT">
                    <span class="d-flex justify-content-center align-items-center w-100 h-100" style="font-size: 2rem;">üòÉ</span>
                </button>
                <button id="speak_with_chatgpt_hd" class="btn btn-info btn-lg recordButton" data-action="speak_with_chatgpt_hd"
                        data-bs-toggle="tooltip" title="Speak with HD Audio">
                    <span class="d-flex justify-content-center align-items-center w-100 h-100" style="font-size: 2rem;">üòÅ</span>
                </button>
                <button id="stop_playback" class="btn btn-danger btn-lg" data-action="stop_playback" disabled
                        data-bs-toggle="tooltip" title="Stop playback">
                    <span class="d-flex justify-content-center align-items-center w-100 h-100" style="font-size: 2rem;">üõë</span>
                </button>
            </div>
        </div>

        <div class="chats flex-grow-1 scroll-y me-n5 pe-5 mt-4" style="max-height: calc(100vh - 200px); overflow-y: auto;">
        </div>

        <!-- –ë–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ -->
        <div id="errorMessages" class="mb-3 ms-auto" style="color: red;">
            <div id="errorLine"></div>
        </div>
    </div>
@endsection

@section('footerScripts')
    <script>
        $(document).ready(function() {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    trigger: 'hover'  // –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç—É–ª—Ç–∏–ø—É –ø–æ—è–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –∏—Å—á–µ–∑–∞—Ç—å –ø—Ä–∏ –æ—Ç–≤–µ–¥–µ–Ω–∏–∏
                });
            });

            const SPOKEN_LANGUAGE_KEY = 'spokenLanguage';
            const PLAYBACK_LANGUAGE_KEY = 'playbackLanguage';

            // –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            const errorLine = $('#errorLine');

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            function showError(message) {
                console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', message);  // –õ–æ–≥ –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
                $('#errorMessages').show();  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫
                $('#errorLine').text(message);  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                console.log('–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∞');  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }


            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ—à–∏–±–æ–∫
            function hideError() {
                errorLine.text('');
                $('#errorMessages').hide();
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const savedSpokenLanguage = localStorage.getItem(SPOKEN_LANGUAGE_KEY);
            const savedPlaybackLanguage = localStorage.getItem(PLAYBACK_LANGUAGE_KEY);

            if (savedSpokenLanguage) {
                $('#spokenLanguageSelect').val(savedSpokenLanguage);
            }

            if (savedPlaybackLanguage) {
                $('#languageSelect').val(savedPlaybackLanguage);
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ–ª–µ–∫—Ç–æ–≤
            $('#spokenLanguageSelect').on('change', function () {
                const selectedSpokenLanguage = $(this).val();
                localStorage.setItem(SPOKEN_LANGUAGE_KEY, selectedSpokenLanguage);
            });

            $('#languageSelect').on('change', function () {
                const selectedPlaybackLanguage = $(this).val();
                localStorage.setItem(PLAYBACK_LANGUAGE_KEY, selectedPlaybackLanguage);
            });

            let isListening = false;
            let recognition;
            let voices = [];
            let currentButton = null;
            let groupIndex = 0;
            let currentAudio = null;
            let isSpeaking = false;
            let textVoice = null;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
            if ('webkitSpeechRecognition' in window) {
                recognition = new webkitSpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = false;
                recognition.lang = $('#spokenLanguageSelect').val();
                recognition.maxAlternatives = 5;

                recognition.onstart = function () {
                    hideError(); // –°–∫—Ä—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø–∏—Å–∏
                    console.log('–ù–∞—á–∞–ª–∞—Å—å –∑–∞–ø–∏—Å—å');
                };

                recognition.onresult = function (event) {
                    if (isSpeaking === false) {
                        const transcript = event.results[event.resultIndex][0].transcript.trim();
                        console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ', transcript);

                        if (transcript.length < 3) {
                            showError('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –∑–∞–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
                            return; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
                        appendUserMessage(transcript);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                        if (!document.hidden) {
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
                            navigator.clipboard.writeText(transcript).then(function () {
                                console.log('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.');
                            }).catch(function (err) {
                                showError('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.');
                            });
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                        sendTranscriptionToServer(transcript, currentButton);
                    }
                };

                recognition.onerror = function (event) {
                    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ', event.error);
                    setTimeout(() => {
                        showError('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ' + event.error);
                    }, 100);  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                };



                recognition.onend = function () {
                    if (isListening && !isSpeaking) {
                        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
                        try {
                            recognition.start();
                        } catch (e) {
                            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.");
                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:", e);
                        }
                    } else {
                        resetButtons();  // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–ª—É—à–∞—Ç—å
                    }
                };
            } else {
                showError("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Speech API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏.");
            }

            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            $('#text_with_chatgpt').on('click', function () {
                currentButton = 'text_with_chatgpt';
                handleRecordButtonClick(this, currentButton);
            });

            // –ö–ª–∏–∫ –ø–æ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–µ
            $('#speak_with_chatgpt').on('click', function () {
                currentButton = 'speak_with_chatgpt';
                handleRecordButtonClick(this, currentButton);
            });

            // –ö–ª–∏–∫ –ø–æ —Ç—Ä–µ—Ç–µ–π –∫–Ω–æ–ø–∫–µ
            $('#speak_with_chatgpt_hd').on('click', function () {
                currentButton = 'speak_with_chatgpt_hd';
                handleRecordButtonClick(this, currentButton);
            });

            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"
            $('#stop_playback').on('click', function () {
                stopPlayback();
            });

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
            function handleRecordButtonClick(button, action) {
                if (isListening) {
                    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
                    recognition.stop();
                    isListening = false;
                    resetButton(button);
                } else {
                    if (recognition) {
                        recognition.lang = $('#spokenLanguageSelect').val();
                        console.log('–ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —è–∑—ã–∫–∞:', recognition.lang);
                        try {
                            if (!isSpeaking) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
                                recognition.start();
                                isListening = true;
                                $(button).data('original-text', $(button).html());
                                $(button).html('<span class="d-flex justify-content-center align-items-center w-100 h-100" style="font-size: 2rem;">üïó</span>');
                            } else {
                                showError('–ù–µ –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –∏–¥–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ.');
                            }
                        } catch (e) {
                            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');
                            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
                        }
                    }
                }
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            function sendTranscriptionToServer(transcription, action) {
                const inputLanguage = $('#spokenLanguageSelect').val();
                const playbackLanguage = $('#languageSelect').val();
                console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ${transcription}`);

                $.ajax({
                    url: '/send',
                    type: 'POST',
                    data: {
                        transcription: transcription,
                        inputLanguage: inputLanguage,
                        playbackLanguage: playbackLanguage,
                        button: action,
                        _token: $('input[name="_token"]').val()
                    },
                    success: function (response) {
                        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞: ", response);
                        handleServerResponse(response, action);
                    },
                    error: function (xhr, status, error) {
                        showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.");
                        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ", error);
                    }
                });
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            function handleServerResponse(data, button) {
                switch (button) {
                    case 'text_with_chatgpt':
                        appendBotMessage(data.text);
                        isSpeaking = false;
                        break;
                    case 'speak_with_chatgpt':
                        appendBotMessage(data.text);
                        isSpeaking = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
                        speakText(data.text, button, data.playback_language);
                        break;
                    case 'speak_with_chatgpt_hd':
                        appendBotMessage(data.text);
                        isSpeaking = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –∏–¥–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
                        speakTextHD(data.audio_url, button);
                        break;
                    default:
                        navigator.clipboard.writeText(data.text);
                        resetButton(button);
                        break;
                }
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
            function appendUserMessage(message) {
                const userMessageElem = createUserMessageElement(message, groupIndex);
                $('.chats').append(userMessageElem);
                scrollDown();
                groupIndex++;
            }

            function appendBotMessage(message) {
                const botMessageElem = createBotMessageElement(message, groupIndex);
                $('.chats').append(botMessageElem);
                scrollDown();
                groupIndex++;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            function createUserMessageElement(message, group) {
                message = message.replace(/\n/g, '<br>');
                return $(`<div class="d-flex justify-content-end mb-10 message" data-group="${group}">
            <div class="d-flex flex-column align-items-start">
                <div class="p-5 rounded bg-light-primary text-gray-900 fw-semibold mw-lg-400px text-start">${message}</div>
            </div>
        </div>`);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            function createBotMessageElement(message, group) {
                message = message.replace(/\n/g, '<br>');
                return $(`<div class="d-flex justify-content-start mb-10 message" data-group="${group}">
            <div class="d-flex flex-column align-items-start">
                <div class="p-5 rounded bg-light-info text-gray-900 fw-semibold mw-lg-400px text-start">${message}</div>
            </div>
        </div>`);
            }

            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            function scrollDown() {
                $('.chats').scrollTop($('.chats').prop('scrollHeight'));
            }

            // –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            function resetButton(button) {
                const originalText = $(button).data('original-text');
                $(button).html(originalText);
            }

            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            function resetButtons() {
                $('.recordButton').each(function () {
                    resetButton(this);
                });
                isListening = false;
            }

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Web Speech API
            function speakText(text, button, lang = 'ru-RU') {
                if(textVoice === text){
                    return;
                }
                if (voices.length === 0) {
                    window.speechSynthesis.onvoiceschanged = function () {
                        voices = window.speechSynthesis.getVoices();
                        speakText(text, button, lang);
                    };
                    return;
                }
                console.log('–ù–∞—á–∞–ª–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', text);
                textVoice = text;
                const utterance = new SpeechSynthesisUtterance(text);
                let selectedVoice = voices.find(voice => voice.lang === lang) || voices.find(voice => voice.lang.startsWith('ru')) || voices[0];

                if (selectedVoice) {
                    utterance.voice = selectedVoice;
                } else {
                    console.error('–ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }

                window.speechSynthesis.speak(utterance);
                $('#stop_playback').prop('disabled', false);
                // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                isSpeaking = true;
                utterance.onend = function () {
                    console.log('–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                    $('#stop_playback').prop('disabled', true); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    isSpeaking = false; // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    if (isListening && !isSpeaking) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                        try {
                            recognition.start();
                        } catch (e) {
                            console.log("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ:", e);
                        }
                    }
                };
                utterance.onerror = function(event) {
                    showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏.');
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏:', event);
                };
            }

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ HD-–∑–≤—É–∫–∞
            function speakTextHD(audioUrl, button) {
                console.log('–ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è HD-–∑–≤—É–∫–∞:', audioUrl);
                currentAudio = new Audio(audioUrl);
                currentAudio.play();
                $('#stop_playback').prop('disabled', false);
                // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
                isSpeaking = true;
                currentAudio.onended = function () {
                    console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ HD-–∑–≤—É–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
                    $('#stop_playback').prop('disabled', true); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    isSpeaking = false; // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    if (isListening && !isSpeaking) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                        recognition.start(); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    }
                };
            }

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            function stopPlayback() {
                if (window.speechSynthesis.speaking) {
                    window.speechSynthesis.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                }

                if (currentAudio) {
                    currentAudio.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
                    currentAudio = null;
                }

                $('#stop_playback').prop('disabled', true); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                isSpeaking = false;
            }

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
            document.addEventListener('visibilitychange', function () {
                if (!document.hidden && isListening) {
                    try {
                        recognition.start();
                    } catch (e) {
                        console.log("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ:", e);
                    }
                }
            });
        })
    </script>
@endsection
