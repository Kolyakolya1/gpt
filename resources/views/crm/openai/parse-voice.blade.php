@extends('crm.layout')
@section('headerStyles')

@endsection

@section('content')
    <input type="hidden" name="_token" value="{{ csrf_token() }}">

    <div class="container mt-4">
        <div class="mb-3">
            <label for="spokenLanguageSelect" class="form-label">Select the language you speak:</label>
            <select id="spokenLanguageSelect" class="form-select">
                <option value="ru-RU">Russian</option>
                <option value="uk-UA">Ukrainian</option>
                <option value="en-US">English</option>
                <option value="de-DE">German</option>
                <option value="sk-SK">Slovak</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="languageSelect" class="form-label">Select the playback language:</label>
            <select id="languageSelect" class="form-select">
                <option value="ru-RU">Russian</option>
                <option value="uk-UA">Ukrainian</option>
                <option value="en-US">English</option>
                <option value="de-DE">German</option>
                <option value="sk-SK">Slovak</option>
            </select>
        </div>
        <div class="d-flex flex-column gap-3">
            <button id="speak_with_chatgpt" class="btn btn-warning btn-lg recordButton" data-action="speak_with_chatgpt">Chat with ChatGpt</button>
            <button id="speak_with_chatgpt_hd" class="btn btn-info btn-lg recordButton" data-action="speak_with_chatgpt_hd">Chat with ChatGpt HD</button>
            <button id="stop_playback" class="btn btn-danger btn-lg" data-action="stop_playback" disabled>Stop Playback</button>
        </div>

        <div class="chats scroll-y me-n5 pe-5 h-300px h-lg-auto mt-4" style="max-height: 800px; overflow-y: auto;">
        </div>
    </div>
@endsection

@section('footerScripts')
    <script>
        $(document).ready(function() {
            let isListening = false;
            let recognition;
            let voices = [];
            let currentButton = null;
            let groupIndex = 0;
            let currentAudio = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–¥–∏–æ

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Web Speech API
            if ('webkitSpeechRecognition' in window) {
                recognition = new webkitSpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = false;
                recognition.lang = $('#spokenLanguageSelect').val();
                recognition.maxAlternatives = 5;

                recognition.onstart = function() {
                    console.log('–ù–∞—á–∞–ª–∞—Å—å –∑–∞–ø–∏—Å—å');
                };

                recognition.onresult = function(event) {
                    const transcript = event.results[event.resultIndex][0].transcript;
                    console.log('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ', transcript);

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
                    appendUserMessage(transcript);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if (!document.hidden) {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–∞
                        navigator.clipboard.writeText(transcript).then(function() {
                            console.log('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.');
                        }).catch(function(err) {
                            console.log('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.');
                        });
                    } else {
                        console.log('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.');
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    sendTranscriptionToServer(transcript, currentButton);
                };

                recognition.onerror = function(event) {
                    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ', event.error);

                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ "no-speech", –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    if (event.error === 'no-speech') {
                        console.log('–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.');
                        restartRecognition();  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    } else {
                        resetButtons();  // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                    }
                };

                recognition.onend = function() {
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–ª—É—à–∞—Ç—å
                    if (isListening && !document.hidden) {
                        try {
                            recognition.start();
                        } catch (e) {
                            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:", e);
                        }
                    } else {
                        resetButtons();  // –°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–ª—É—à–∞—Ç—å
                    }
                };
            } else {
                alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Speech API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–ø–∏—Å–∏.");
            }

            // –ö–ª–∏–∫ –ø–æ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–µ
            $('#speak_with_chatgpt').on('click', function() {
                currentButton = 'speak_with_chatgpt';
                handleRecordButtonClick(this, currentButton);
            });

            // –ö–ª–∏–∫ –ø–æ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–µ
            $('#speak_with_chatgpt_hd').on('click', function() {
                currentButton = 'speak_with_chatgpt_hd';
                handleRecordButtonClick(this, currentButton);
            });

            // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"
            $('#stop_playback').on('click', function() {
                stopPlayback();
            });

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
            function handleRecordButtonClick(button, action) {
                if (isListening) {
                    recognition.stop();
                    isListening = false;
                    resetButton(button);
                } else {
                    if (recognition) {
                        recognition.lang = $('#spokenLanguageSelect').val();
                        try {
                            recognition.start();
                            isListening = true;
                            $(button).data('original-text', $(button).html());
                            $(button).html('üïó Listening...');
                        } catch (e) {
                            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', e);
                        }
                    }
                }
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            function sendTranscriptionToServer(transcription, action) {
                const inputLanguage = $('#spokenLanguageSelect').val();
                const playbackLanguage = $('#languageSelect').val();

                $.ajax({
                    url: '/send',
                    type: 'POST',
                    data: {
                        transcription: transcription,
                        inputLanguage: inputLanguage,
                        playbackLanguage: playbackLanguage,
                        button: action,
                        _token: $('input[name="_token"]').val()
                    },
                    success: function(response) {
                        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞: ", response);
                        handleServerResponse(response, action);
                    },
                    error: function(xhr, status, error) {
                        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ", error);
                    }
                });
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            function handleServerResponse(data, button) {
                switch (button) {
                    case 'speak_with_chatgpt':
                        appendBotMessage(data.text);
                        speakText(data.text, button, data.playback_language);
                        break;
                    case 'speak_with_chatgpt_hd':
                        appendBotMessage(data.text);
                        speakTextHD(data.audio_url, button);
                        break;
                    default:
                        navigator.clipboard.writeText(data.text);
                        resetButton(button);
                        break;
                }
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
            function appendUserMessage(message) {
                const userMessageElem = createUserMessageElement(message, groupIndex);
                $('.chats').append(userMessageElem);
                scrollDown();
                groupIndex++;
            }

            function appendBotMessage(message) {
                const botMessageElem = createBotMessageElement(message, groupIndex);
                $('.chats').append(botMessageElem);
                scrollDown();
                groupIndex++;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            function createUserMessageElement(message, group) {
                message = message.replace(/\n/g, '<br>');
                return $(`<div class="d-flex justify-content-end mb-10 message" data-group="${group}">
            <div class="d-flex flex-column align-items-start">
                <div class="p-5 rounded bg-light-primary text-gray-900 fw-semibold mw-lg-400px text-start">${message}</div>
            </div>
        </div>`);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            function createBotMessageElement(message, group) {
                message = message.replace(/\n/g, '<br>');
                return $(`<div class="d-flex justify-content-start mb-10 message" data-group="${group}">
            <div class="d-flex flex-column align-items-start">
                <div class="p-5 rounded bg-light-info text-gray-900 fw-semibold mw-lg-400px text-start">${message}</div>
            </div>
        </div>`);
            }

            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            function scrollDown() {
                $('.chats').scrollTop($('.chats').prop('scrollHeight'));
            }

            // –°–±—Ä–æ—Å –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            function resetButton(button) {
                const originalText = $(button).data('original-text');
                $(button).html(originalText);
            }

            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            function resetButtons() {
                $('.recordButton').each(function() {
                    resetButton(this);
                });
                isListening = false;
            }

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Web Speech API
            function speakText(text, button, lang = 'ru-RU') {
                if (voices.length === 0) {
                    window.speechSynthesis.onvoiceschanged = function() {
                        voices = window.speechSynthesis.getVoices();
                        speakText(text, button, lang);
                    };
                    return;
                }

                const utterance = new SpeechSynthesisUtterance(text);
                let selectedVoice = voices.find(voice => voice.lang === lang) || voices.find(voice => voice.lang.startsWith('ru')) || voices[0];

                if (selectedVoice) {
                    utterance.voice = selectedVoice;
                } else {
                    console.error('–ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }

                window.speechSynthesis.speak(utterance);

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                $('#stop_playback').prop('disabled', false);

                utterance.onend = function() {
                    $('#stop_playback').prop('disabled', true); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                };
            }

            // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ HD-–∑–≤—É–∫–∞
            function speakTextHD(audioUrl, button) {
                currentAudio = new Audio(audioUrl);
                currentAudio.play();

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                $('#stop_playback').prop('disabled', false);

                currentAudio.onended = function() {
                    $('#stop_playback').prop('disabled', true); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                };
            }

            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            function stopPlayback() {
                if (window.speechSynthesis.speaking) {
                    window.speechSynthesis.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                }

                if (currentAudio) {
                    currentAudio.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
                    currentAudio = null;
                }

                $('#stop_playback').prop('disabled', true); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            }

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
            document.addEventListener('visibilitychange', function() {
                if (!document.hidden && isListening) {
                    try {
                        recognition.start();
                    } catch (e) {
                        console.log("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ:", e);
                    }
                }
            });
        });
    </script>
@endsection
